openapi: 3.0.3
info:
  title: MR-Mahjong API
  version: 0.1.0
  description: |
    REST API と WebSocket のインターフェース定義。
    - REST: ゲームルームや基本情報の取得
    - WebSocket: リアルタイムなゲーム/チャットメッセージ送受信
servers:
  - url: http://localhost:8080
    description: Local HTTP server
  - url: ws://localhost:8080
    description: Local WebSocket server (documented via 200 responses and examples)
tags:
  - name: REST
    description: HTTP REST endpoints
  - name: WebSocket
    description: WebSocket connection and message shapes (documented as 200 responses)
paths:
  /health:
    get:
      tags: [REST]
      summary: Health check
      description: サーバの稼働確認。
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/v1/rooms:
    get:
      tags: [REST]
      summary: List rooms
      description: ルーム一覧を取得します。
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
              examples:
                sample:
                  summary: サンプル
                  value:
                    - id: room-123
                      name: East Wind Table
                      players:
                        - id: p1
                          name: Alice
                        - id: p2
                          name: Bob
                      createdAt: '2025-09-29T12:00:00Z'
    post:
      tags: [REST]
      summary: Create room
      description: 新しいルームを作成します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
            examples:
              create:
                value:
                  name: Friendly Table
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
  /api/v1/rooms/{roomId}:
    parameters:
      - $ref: '#/components/parameters/RoomId'
    get:
      tags: [REST]
      summary: Get room
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
    delete:
      tags: [REST]
      summary: Delete room
      responses:
        '204':
          description: 削除成功
  /api/v1/yaku:
    post:
      tags: [REST]
      summary: Evaluate yaku
      description: 手牌/副露/和了状況から役と符・翻を判定します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YakuEvaluationRequest'
            examples:
              sample:
                summary: リーチ自摸 + 白
                value:
                  handTiles: [1m,1m,2m,3m,3m,4p,4p,5p,6p,7s,7s,7s,白,白]
                  openMelds:
                    - type: pon
                      tiles: [白, 白, 白]
                  winTile: 白
                  isTsumo: true
                  riichi: true
                  ippatsu: false
                  doraIndicators: [2p]
                  uraDoraIndicators: [3p]
                  roundWind: east
                  seatWind: south
      responses:
        '200':
          description: 判定結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YakuEvaluationResponse'
              examples:
                result:
                  value:
                    yaku:
                      - name: 門前清自摸和
                        han: 1
                      - name: 役牌(白)
                        han: 1
                      - name: 立直
                        han: 1
                    fu: 30
                    han: 3
                    doraCount: 1
                    uraDoraCount: 1
                    totalHan: 5
                    yakuman: []
                    score: 2000
  /ws/game:
    get:
      tags: [WebSocket]
      summary: WebSocket - Game stream (room state authority)
      description: |
        ルームIDをクエリパラメータに付与して接続するゲーム用WebSocket。
        サーバーは対局状態の唯一の権威であり、初回に各クライアントの手牌/公開情報/ワンパイ状態等を配信し、以降のイベントで更新を通知します。
        クライアントは受信した状態に合わせて手牌を並び替え、打牌などのアクションをJSONメッセージで送信します。
        複数種類のメッセージを送信するのでtypeで識別してください
        remainingCountは残りの牌の数
      parameters:
        - in: query
          name: roomId
          required: true
          schema:
            type: string
          description: ルームID
      responses:
        '200':
          description: 接続直後の初期配信（仕様上 200 として例示）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameInitialState'
              examples:
                initial:
                  summary: 初回配信（各クライアント視点の手牌含む）サーバー→クライアント
                  value:
                    type: init
                    playerId: p1
                    payload:
                      tehai: [1m,1m,2m,3m,3m,4p,4p,5p,6p,7s,7s,7s,白]
                      wanpai: { doras: [2p, ]}
                      round: east1
                      dealer: p2
                      scores: { p1: 25000, p2: 25000, p3: 25000 }
                client_discard_action:
                  summary: クライアント→サーバー 打牌アクション例
                  value:
                    type: dahai
                    payload:
                      playerId: p1
                      tile: 9s
                      tehai: [1m,1m,2m,3m,3m,4p,4p,5p,6p,7s,7s,7s,白]
                      kawa: { p1: [5p], p2: [6s], p3: [9w]}
                server_discard_event:
                  summary: サーバー→クライアント 打牌結果イベント（ブロードキャスト）
                  value:
                    type: event
                    payload:
                      playerId: p2
                      tehai: [1m,1m,2m,3m,3m,4p,4p,5p,6p,7s,7s,7s,白]
                      nextTurn: p2
                      kawa: { p1: [5p, 9s], p2: [6s], p3: [9w]}
                client_kan_action:
                  summary: クライアント→サーバー 槓宣言（加槓の例）
                  value:
                    type: action
                    action: kan
                    payload:
                      kanType: kakan
                      kanTiles: [5p,5p,5p,5p]
                client_minkan_action:
                  summary: クライアント→サーバー 槓宣言（明槓の例）
                  value:
                    type: action
                    action: kan
                    payload:
                      kanType: minkan
                      kanTiles: [7s,7s,7s,7s]
                client_ankan_action:
                  summary: クライアント→サーバー 槓宣言（暗槓の例）
                  value:
                    type: action
                    action: kan
                    payload:
                      kanType: ankan
                      kanTiles: [白,白,白,白]
                server_kan_event:
                  summary: サーバー→クライアント 槓成立イベント（ブロードキャスト）
                  value:
                    type: event
                    event: player_declared_kakan
                    payload:
                      playerId: p1
                      openMelds:
                        - type: kakan
                          tiles: [5p,5p,5p,5p]
                      nextTurn: p1
                server_dora_reveal_event:
                  summary: サーバー→クライアント 槓ドラ表示（ブロードキャスト）
                  value:
                    type: event
                    event: dora_indicator_revealed
                    payload:
                      newDoraIndicator: 3p
                server_rinshan_draw:
                  summary: サーバー→クライアント 嶺上牌ツモ
                  value:
                    type: event
                    event: player_drew_rinshan
                    payload:
                      playerId: p1
                      drawnTile: 9s
                client_pon_action:
                  summary: クライアント→サーバー ポン宣言
                  value:
                    type: action
                    action: pon
                    payload:
                      ponTiles: [7s,7s,7s]
                      fromPlayerId: p2
                server_pon_event:
                  summary: サーバー→クライアント ポン成立イベント（ブロードキャスト）
                  value:
                    type: event
                    event: player_declared_pon
                    payload:
                      playerId: p1
                      openMelds:
                        - type: pon
                          tiles: [7s,7s,7s]
                      nextTurn: p1
  /ws/score:
    get:
      tags: [WebSocket]
      summary: WebSocket - Scoring stream (result aggregation)
      description: |
        スコア用WebSocket。`roomId` をクエリに付与して接続します。
        各クライアントは現在の点数と、和了時の手牌構成（面子/待ち/ドラ枚数など必要最小限）をメッセージでサーバーへ送信します。
        3人分の入力が揃ったら、サーバーは各プレイヤーに対応する点数の増減（差分）を計算して返し、和了者には翻数も返却します。
        ws/gameと同じタイミングで接続し続けてください
      parameters:
        - in: query
          name: roomId
          required: true
          schema:
            type: string
          description: ルームID
      responses:
        '200':
          description: メッセージ例（仕様上 200 として例示）
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ScoreInputMessage'
                  - $ref: '#/components/schemas/ScoreResultMessage'
              examples:
                client_score_input:
                  summary: クライアント→サーバー 現在点数と和了手牌の送信(あがったクライアントのみ)
                  value:
                    type: score_input
                    payload:
                      playerId: p1
                      round: east1
                      currentScores: { p1: 25000, p2: 25000, p3: 25000 }
                server_score_result:
                  summary: サーバー→クライアント 集計結果（ブロードキャスト）
                  value:
                    type: score_result
                    payload:
                      deltas: { p1: +4000, p2: -2000, p3: -2000 }
                      newScores: { p1: 29000, p2: 23000, p3: 23000 }
                      winnerId: p1
components:
  parameters:
    RoomId:
      name: roomId
      in: path
      required: true
      schema:
        type: string
      description: ルームID
  schemas:
    Room:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        createdAt:
          type: string
          format: date-time
      required: [id, name, players, createdAt]
    Player:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required: [id, name]
    CreateRoomRequest:
      type: object
      properties:
        name:
          type: string
      required: [name]
    GameInitialState:
      type: object
      properties:
        type:
          type: string
          enum: [initial_state]
        roomId:
          type: string
        playerId:
          type: string
        payload:
          type: object
          properties:
            handTiles:
              type: array
              items:
                type: string
            riverTiles:
              type: array
              items:
                type: string
            wanpai:
              type: object
              properties:
                doraIndicators:
                  type: array
                  items:
                    type: string
                remainingCount:
                  type: integer
            openMelds:
              type: array
              items:
                $ref: '#/components/schemas/OpenMeld'
            round:
              type: string
            dealer:
              type: string
            scores:
              type: object
              additionalProperties:
                type: integer
      required: [type, roomId, payload]
    ClientActionMessage:
      type: object
      properties:
        type:
          type: string
          enum: [action]
        action:
          type: string
          enum: [discard_tile, pon, kan, ron, tsumo]
        payload:
          type: object
          properties:
            tile:
              type: string
            messageId:
              type: string
            kanType:
              type: string
              description: 槓の種類（kan アクション時のみ使用）
              enum: [minkan, kakan, ankan]
            kanTiles:
              type: array
              description: 構成する4枚の牌（kan アクション時のみ使用）
              items:
                type: string
            ponTiles:
              type: array
              description: ポンで作る3枚の牌（pon アクション時のみ使用）
              items:
                type: string
            fromPlayerId:
              type: string
              description: 鳴いた対象プレイヤーID（pon/minkan 時のみ）
      required: [type, action]
    ServerEventMessage:
      type: object
      properties:
        type:
          type: string
          enum: [event]
        event:
          type: string
          enum: [game_started, player_drew_tile, player_discarded, next_turn, game_result, player_joined, player_declared_minkan, player_declared_kakan, player_declared_ankan, player_declared_pon, dora_indicator_revealed, player_drew_rinshan]
        payload:
          type: object
      required: [type, event]
    PingMessage:
      type: object
      properties:
        type:
          type: string
          enum: [ping]
        timestamp:
          type: string
          format: date-time
      required: [type]
    PongMessage:
      type: object
      properties:
        type:
          type: string
          enum: [pong]
        timestamp:
          type: string
          format: date-time
      required: [type]
    ScoreInputMessage:
      type: object
      properties:
        type:
          type: string
          enum: [score_input]
        payload:
          type: object
          properties:
            playerId:
              type: string
            currentScores:
              type: object
              additionalProperties:
                type: integer
      required: [type, payload]
    ScoreResultMessage:
      type: object
      properties:
        type:
          type: string
          enum: [score_result]
        payload:
          type: object
          properties:
            deltas:
              type: object
              additionalProperties:
                type: integer
            newScores:
              type: object
              additionalProperties:
                type: integer
            winnerId:
              type: string
            han:
              type: integer
      required: [type, payload]
    YakuItem:
      type: object
      properties:
        name:
          type: string
        han:
          type: integer
      required: [name, han]
    OpenMeld:
      type: object
      properties:
        type:
          type: string
          description: 副露の種類
          enum: [chi, pon, minkan, kakan, ankan]
        tiles:
          type: array
          items:
            type: string
          description: 面子構成の牌
      required: [type, tiles]
    YakuEvaluationRequest:
      type: object
      properties:
        handTiles:
          type: array
          items:
            type: string
        openMelds:
          type: array
          items:
            $ref: '#/components/schemas/OpenMeld'
        winTile:
          type: string
        isTsumo:
          type: boolean
        riichi:
          type: boolean
        doubleRiichi:
          type: boolean
        ippatsu:
          type: boolean
        rinshan:
          type: boolean
        chankan:
          type: boolean
        haitei:
          type: boolean
        houtei:
          type: boolean
        roundWind:
          type: string
          enum: [east, south, west, north]
        seatWind:
          type: string
          enum: [east, south, west, north]
        doraIndicators:
          type: array
          items:
            type: string
        uraDoraIndicators:
          type: array
          items:
            type: string
      required: [handTiles, isTsumo]
    YakuEvaluationResponse:
      type: object
      properties:
        yaku:
          type: array
          items:
            $ref: '#/components/schemas/YakuItem'
        fu:
          type: integer
        han:
          type: integer
        totalHan:
          type: integer
        doraCount:
          type: integer
        uraDoraCount:
          type: integer
        yakuman:
          type: array
          items:
            type: string
        score:
          type: integer
      required: [yaku, fu, han]

